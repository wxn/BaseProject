//
//  CommonUtil.m
//  XTWL_XFJY
//
//  Created by Cinna on 14/10/28.
//  Copyright (c) 2014年 xuntiangwangluo. All rights reserved.
//

#import "CommonUtil.h"
#import <MapKit/MapKit.h>
#import<CommonCrypto/CommonDigest.h>
@implementation CommonUtil

#pragma mark - 日期相关
//获取当前日期字符串
+ (NSString *)currentDateWithString:(NSString *)string {
    NSString *month = [string substringWithRange:NSMakeRange(4,2)];
    NSString *day = [string substringWithRange:NSMakeRange(6,2)];
    if (month.length == 0)
        return nil;
    NSString *dateStr = [NSString stringWithFormat:@"%@月%@日",AvailableString(month),AvailableString(day)];
    return dateStr;
}
//获取当前星期字符串
+ (NSString *)currentWeekWithString:(NSString *)string {
    if(string.length == 0)
        return @"返回数据解析出错";
    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
    [formatter setDateFormat:@"yyyyMMdd"];
    NSDate *date = [formatter dateFromString:string];
    NSArray * arrWeek=[NSArray arrayWithObjects:@"周日",@"周一",@"周二",@"周三",@"周四",@"周五",@"周六", nil];
    NSCalendar *calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSCalendarIdentifierGregorian];
    NSDateComponents *comps = [[NSDateComponents alloc] init];
    NSInteger unitFlags = NSCalendarUnitYear |
    NSCalendarUnitMonth |
    NSCalendarUnitDay |
    NSCalendarUnitWeekday |
    NSCalendarUnitHour |
    NSCalendarUnitMinute |
    NSCalendarUnitSecond;
    comps = [calendar components:unitFlags fromDate:date];
    NSInteger week = [comps weekday];
    if(week < 1 || week > arrWeek.count)
    {
        return @"返回数据解析出错";
    }
    return [NSString stringWithFormat:@"%@",[arrWeek objectAtIndex:week-1]];
}
//获取当前农历,只有月、日
+ (NSString*)currentLunarCalendarWithString:(NSString *)string {
    if(string.length == 0)
        return @"";
    NSArray *chineseMonths=[NSArray arrayWithObjects:
                            @"正月", @"二月", @"三月", @"四月", @"五月", @"六月", @"七月", @"八月",
                            @"九月", @"十月", @"冬月", @"腊月", nil];
    NSArray *chineseDays=[NSArray arrayWithObjects:
                          @"初一", @"初二", @"初三", @"初四", @"初五", @"初六", @"初七", @"初八", @"初九", @"初十",
                          @"十一", @"十二", @"十三", @"十四", @"十五", @"十六", @"十七", @"十八", @"十九", @"二十",
                          @"廿一", @"廿二", @"廿三", @"廿四", @"廿五", @"廿六", @"廿七", @"廿八", @"廿九", @"三十", nil];
    NSCalendar *localeCalendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSCalendarIdentifierChinese];
    unsigned unitFlags = NSCalendarUnitYear | NSCalendarUnitMonth | NSCalendarUnitDay;
    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
    [formatter setDateFormat:@"yyyy-MM-dd"];
    NSDate *date = [formatter dateFromString:string];
    NSDateComponents *localeComp = [localeCalendar components:unitFlags fromDate:date];
    if(localeComp.month < 1 || localeComp.month > chineseMonths.count || localeComp.day < 1 || localeComp.day > chineseDays.count)
        return @"";
    NSString *m_str = [chineseMonths objectAtIndex:localeComp.month-1];
    NSString *d_str = [chineseDays objectAtIndex:localeComp.day-1];
    NSString *chineseCal_str =[NSString stringWithFormat:@" %@%@ ",AvailableString(m_str),AvailableString(d_str)];
    return chineseCal_str;
}

+ (NSString *)currentDateString {
    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
    [formatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
    NSString *dateStr = [formatter stringFromDate:[NSDate date]];
    return dateStr;
}

#pragma mark - 根据字符串获取字符串高度
+ (int)heightForString:(NSString *)string stringWidth:(CGFloat)width fontSize:(CGFloat)fontSize {
    CGRect rect = [string boundingRectWithSize:CGSizeMake(width, MAXFLOAT) options:NSStringDrawingUsesLineFragmentOrigin attributes:@{NSFontAttributeName:Font(fontSize)} context:nil];
    return ceilf(rect.size.height);
}

#pragma mark - 根据字符串获取字符串宽度
+ (int)widthForString:(NSString *)string fontSize:(CGFloat)fontSize {
    CGRect rect = [string boundingRectWithSize:CGSizeMake(MAXFLOAT, MAXFLOAT) options:NSStringDrawingUsesLineFragmentOrigin attributes:@{NSFontAttributeName:Font(fontSize)} context:nil];
    return ceilf(rect.size.width);
}

#pragma mark 获取设备名称
+ (NSString *)getPhoneDevicName {
    size_t size;
    sysctlbyname("hw.machine", NULL, &size, NULL, 0);
    char *machine = (char*)malloc(size);
    sysctlbyname("hw.machine", machine, &size, NULL, 0);
    NSString *platform = [NSString stringWithCString:machine encoding:NSUTF8StringEncoding];

    if([platform isEqualToString:@"iPhone1,1"])return@"iPhone 2G";
    
    if([platform isEqualToString:@"iPhone1,2"])return@"iPhone 3G";
    
    if([platform isEqualToString:@"iPhone2,1"])return@"iPhone 3GS";
    
    if([platform isEqualToString:@"iPhone3,1"])return@"iPhone 4";
    
    if([platform isEqualToString:@"iPhone3,2"])return@"iPhone 4";
    
    if([platform isEqualToString:@"iPhone3,3"])return@"iPhone 4";
    
    if([platform isEqualToString:@"iPhone4,1"])return@"iPhone 4S";
    
    if([platform isEqualToString:@"iPhone5,1"])return@"iPhone 5";
    
    if([platform isEqualToString:@"iPhone5,2"])return@"iPhone 5";
    
    if([platform isEqualToString:@"iPhone5,3"])return@"iPhone 5c";
    
    if([platform isEqualToString:@"iPhone5,4"])return@"iPhone 5c";
    
    if([platform isEqualToString:@"iPhone6,1"])return@"iPhone 5s";
    
    if([platform isEqualToString:@"iPhone6,2"])return@"iPhone 5s";
    
    if([platform isEqualToString:@"iPhone7,1"])return@"iPhone 6 Plus";
    
    if([platform isEqualToString:@"iPhone7,2"])return@"iPhone 6";
    
    if([platform isEqualToString:@"iPhone8,1"])return@"iPhone 6s";
    
    if([platform isEqualToString:@"iPhone8,2"])return@"iPhone 6s Plus";
    
    if([platform isEqualToString:@"iPhone8,4"])return@"iPhone SE";
    
    if([platform isEqualToString:@"iPhone9,1"])return@"iPhone 7";
    
    if([platform isEqualToString:@"iPhone9,2"])return@"iPhone 7 Plus";
    
    if([platform isEqualToString:@"iPhone10,1"])return@"iPhone 8";
    
    if([platform isEqualToString:@"iPhone10,4"])return@"iPhone 8";
    
    if([platform isEqualToString:@"iPhone10,2"])return@"iPhone 8 Plus";
    
    if([platform isEqualToString:@"iPhone10,5"])return@"iPhone 8 Plus";
    
    if([platform isEqualToString:@"iPhone10,3"])return@"iPhone X";
    
    if([platform isEqualToString:@"iPhone10,6"])return@"iPhone X";
    
    if([platform isEqualToString:@"iPod1,1"])return@"iPod Touch 1G";
    
    if([platform isEqualToString:@"iPod2,1"])return@"iPod Touch 2G";
    
    if([platform isEqualToString:@"iPod3,1"])return@"iPod Touch 3G";
    
    if([platform isEqualToString:@"iPod4,1"])return@"iPod Touch 4G";
    
    if([platform isEqualToString:@"iPod5,1"])return@"iPod Touch 5G";
    
    if([platform isEqualToString:@"iPad1,1"])return@"iPad 1G";
    
    if([platform isEqualToString:@"iPad2,1"])return@"iPad 2";
    
    if([platform isEqualToString:@"iPad2,2"])return@"iPad 2";
    
    if([platform isEqualToString:@"iPad2,3"])return@"iPad 2";
    
    if([platform isEqualToString:@"iPad2,4"])return@"iPad 2";
    
    if([platform isEqualToString:@"iPad2,5"])return@"iPad Mini 1G";
    
    if([platform isEqualToString:@"iPad2,6"])return@"iPad Mini 1G";
    
    if([platform isEqualToString:@"iPad2,7"])return@"iPad Mini 1G";
    
    if([platform isEqualToString:@"iPad3,1"])return@"iPad 3";
    
    if([platform isEqualToString:@"iPad3,2"])return@"iPad 3";
    
    if([platform isEqualToString:@"iPad3,3"])return@"iPad 3";
    
    if([platform isEqualToString:@"iPad3,4"])return@"iPad 4";
    
    if([platform isEqualToString:@"iPad3,5"])return@"iPad 4";
    
    if([platform isEqualToString:@"iPad3,6"])return@"iPad 4";
    
    if([platform isEqualToString:@"iPad4,1"])return@"iPad Air";
    
    if([platform isEqualToString:@"iPad4,2"])return@"iPad Air";
    
    if([platform isEqualToString:@"iPad4,3"])return@"iPad Air";
    
    if([platform isEqualToString:@"iPad4,4"])return@"iPad Mini 2G";
    
    if([platform isEqualToString:@"iPad4,5"])return@"iPad Mini 2G";
    
    if([platform isEqualToString:@"iPad4,6"])return@"iPad Mini 2G";
    
    if([platform isEqualToString:@"iPad4,7"])return@"iPad Mini 3";
    
    if([platform isEqualToString:@"iPad4,8"])return@"iPad Mini 3";
    
    if([platform isEqualToString:@"iPad4,9"])return@"iPad Mini 3";
    
    if([platform isEqualToString:@"iPad5,1"])return@"iPad Mini 4";
    
    if([platform isEqualToString:@"iPad5,2"])return@"iPad Mini 4";
    
    if([platform isEqualToString:@"iPad5,3"])return@"iPad Air 2";
    
    if([platform isEqualToString:@"iPad5,4"])return@"iPad Air 2";
    
    if([platform isEqualToString:@"iPad6,3"])return@"iPad Pro 9.7";
    
    if([platform isEqualToString:@"iPad6,4"])return@"iPad Pro 9.7";
    
    if([platform isEqualToString:@"iPad6,7"])return@"iPad Pro 12.9";
    
    if([platform isEqualToString:@"iPad6,8"])return@"iPad Pro 12.9";
    
    if([platform isEqualToString:@"i386"])return@"iPhone Simulator";
    
    if([platform isEqualToString:@"x86_64"])return@"iPhone Simulator";
    
    return platform;
}

#pragma mark - 使用正则表达式判断手机号码
+ (BOOL)checkPhoneNumber:(NSString *)string {
    NSString *regex = CHECK_PHONE;
    NSPredicate *pred = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", AvailableString(regex)];
    BOOL isMatch = [pred evaluateWithObject:string];
    return isMatch;
}

#pragma mark - 判断是否存在emoji
+ (NSString *)isContainsEmoji:(NSString *)string {
    __block BOOL isEomji = NO;
    __block NSString *new = string;
    [string enumerateSubstringsInRange:NSMakeRange(0, [string length]) options:NSStringEnumerationByComposedCharacterSequences usingBlock:
     
     ^(NSString *substring, NSRange substringRange, NSRange enclosingRange, BOOL *stop) {
         
         const unichar hs = [substring characterAtIndex:0];
         // surrogate pair
         if (0xd800 <= hs && hs <= 0xdbff)
         {
             if (substring.length > 1)
             {
                 const unichar ls = [substring characterAtIndex:1];
                 const int uc = ((hs - 0xd800) * 0x400) + (ls - 0xdc00) + 0x10000;
                 if (0x1d000 <= uc && uc <= 0x1f77f)
                 {
                     isEomji = YES;
                     new = [string stringByReplacingOccurrencesOfString:substring withString:@""];
                 }
             }
         }
         else if (substring.length > 1) {
             const unichar ls = [substring characterAtIndex:1];
             if (ls == 0x20e3 || ls == 0xfe0f) {
                 isEomji = YES;
                 new = [string stringByReplacingOccurrencesOfString:substring withString:@""];
             }
         } else {
             // non surrogate
             if (0x2100 <= hs && hs <= 0x27ff && hs != 0x263b && hs != 0x2192) {
                 isEomji = YES;
                 new = [string stringByReplacingOccurrencesOfString:substring withString:@""];
             } else if (0x2B05 <= hs && hs <= 0x2b07) {
                 isEomji = YES;
                 new = [string stringByReplacingOccurrencesOfString:substring withString:@""];
             } else if (0x2934 <= hs && hs <= 0x2935) {
                 isEomji = YES;
                 new = [string stringByReplacingOccurrencesOfString:substring withString:@""];
             } else if (0x3297 <= hs && hs <= 0x3299) {
                 isEomji = YES;
                 new = [string stringByReplacingOccurrencesOfString:substring withString:@""];
             } else if (hs == 0xa9 || hs == 0xae || hs == 0x303d || hs == 0x3030 || hs == 0x2b55 || hs == 0x2b1c || hs == 0x2b1b || hs == 0x2b50|| hs == 0x231a ) {
                 isEomji = YES;
                 new = [string stringByReplacingOccurrencesOfString:substring withString:@""];
             }
         }
     }];
    
    return new;
}

#pragma mark 判断时间 ( 当前时间是head的时间戳 end) YES 当前时间<结束时间
+ (BOOL)decideTimeStatusWithCurrentTime:(NSString *)currentTime endTime:(NSString *)endTime {
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    [dateFormatter setDateFormat:@"y-M-d HH:mm:ss"];
    
    //判断endtime字符串长度
    if ([endTime rangeOfString:endTime].length<19) {

        return YES;
    }
    
    NSDate *endDate = [dateFormatter dateFromString:[endTime substringWithRange:NSMakeRange(0, 18)]];
    NSDate *currentTimeDate = [self getCurTimestampWithCurrentTime:currentTime];
    
    NSTimeInterval timeInterval = 0.0;
    
    if ([currentTimeDate timeIntervalSinceDate:endDate]<timeInterval) {
        //
        return YES;
        
    }else{
    
        return NO;
    }

    return YES;
}

//时间戳获取当前时间date
+ (NSDate *)getCurTimestampWithCurrentTime:(NSString *)currentTime {
    NSString *curStr = [currentTime substringWithRange:NSMakeRange(0, 4)];
    NSInteger yeardigit = [curStr integerValue];
    curStr = [currentTime substringWithRange:NSMakeRange(4, 2)];
    NSInteger monthdigit = [curStr integerValue];
    curStr = [currentTime substringWithRange:NSMakeRange(6, 2)];
    NSInteger daydigit = [curStr integerValue];
    curStr = [currentTime substringWithRange:NSMakeRange(8, 2)];
    NSInteger hourdigit = [curStr integerValue];
    curStr = [currentTime substringWithRange:NSMakeRange(10, 2)];
    NSInteger minutedigit = [curStr integerValue];
    NSDateComponents *dateComps = [[NSDateComponents alloc] init];
    [dateComps setYear:yeardigit];
    [dateComps setMonth:monthdigit];
    [dateComps setDay:daydigit];
    [dateComps setHour:hourdigit];
    [dateComps setMinute:minutedigit];
    NSCalendar *calendar = [NSCalendar currentCalendar];
    
    return [calendar dateFromComponents:dateComps];
}


//solr转义
+ (NSString *)solrStingWithString:(NSString *)string {
    NSMutableArray *tempArray = [[NSMutableArray alloc] initWithCapacity:0];
    
    for (int i = 0; i<[string length]; i++) {
        //截取字符串中的每一个字符
        NSString *c = [string substringWithRange:NSMakeRange(i, 1)];
        
        [tempArray addObject:c];
    }

    for (int i=0; i<tempArray.count; i++) {
        
        NSString *c = tempArray[i];

        if ([c isEqualToString:@"\\"] || [c isEqualToString:@"+"] || [c isEqualToString:@"-"] || [c isEqualToString:@"!"] || [c isEqualToString:@"("] || [c isEqualToString:@")"] || [c isEqualToString:@":"]
            || [c isEqualToString:@"^"] || [c isEqualToString:@"["] || [c isEqualToString:@"]"] || [c isEqualToString:@"@"] || [c isEqualToString:@"\{"] || [c isEqualToString:@"}"] || [c isEqualToString:@"~"]
            || [c isEqualToString:@"*"] || [c isEqualToString:@"?"] || [c isEqualToString:@"|"] || [c isEqualToString:@"&"] || [c isEqualToString:@";"] || [c isEqualToString:@"/"]
            || [c isEqualToString:@" "]) {

            NSString *obj = [NSString stringWithFormat:@"\\%@",c];
            
            [tempArray replaceObjectAtIndex:i withObject:obj];
        }
    }
    
    NSMutableString *str = [[NSMutableString alloc] initWithCapacity:0];
    
    for (int i=0; i<tempArray.count; i++) {
        
        [str appendString:tempArray[i]];
    }
    
    
//    NSRange range = NSMakeRange(i, 1);
//    string =   [string stringByReplacingCharactersInRange:range withString:[NSString stringWithFormat:@"、%@",c]];
    

    return str;
}

//根据“,”分割图片地址
+ (NSArray *)imageStrArrayWithStr:(NSString *)str {
    if(str.length <= 0)
        return nil;
    NSMutableArray *array = [NSMutableArray arrayWithArray:[str componentsSeparatedByString:@","]];
    id last = [array lastObject];
    
    if([last isKindOfClass:[NSString class]])
    {
        NSString *s = (NSString *)last;
        if(s.length <= 0)
        {
            [array removeLastObject];
        }
    }
        
    return [NSArray arrayWithArray:array];
    
}

+ (BOOL)isStartLocation {
    BOOL isStartLocation;
    //进入地图页面时会判断用户定位服务是否打开，若没有打开则弹框提示用户
    CLAuthorizationStatus status = [CLLocationManager authorizationStatus];
    if (kCLAuthorizationStatusDenied == status || kCLAuthorizationStatusRestricted == status)
    {
        isStartLocation = NO;
        
    }else {
        isStartLocation = YES;
        
    }
    return isStartLocation;
}

//密码MD5加密
+(NSString *)MD5ForLower32Bate:(NSString *)str{
    
    //要进行UTF8的转码
    const char* input = [str UTF8String];
    unsigned char result[CC_MD5_DIGEST_LENGTH];
    CC_MD5(input, (CC_LONG)strlen(input), result);
    
    NSMutableString *digest = [NSMutableString stringWithCapacity:CC_MD5_DIGEST_LENGTH * 2];
    for (NSInteger i = 0; i < CC_MD5_DIGEST_LENGTH; i++) {
        [digest appendFormat:@"%02x", result[i]];
    }
    
    return digest;
}



@end











