//
//  SetCategoryViewController.m
//  XTWL_IOS_SHOP
//
//  Created by Cinna on 2017/10/25.
//  Copyright © 2017年 XTWL. All rights reserved.
//

#import "SetCategoryViewController.h"

@interface SetCategoryViewController () <UITableViewDelegate, UITableViewDataSource>

@end

@implementation SetCategoryViewController {
    UITableView *categoryTable;
    NSMutableArray *categoryArray;
    UIAlertController *alert;
    BOOL isEditModel;
}

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    
    self.navigationItem.title = NaviTitle_PswSetting;
}

- (void)initSubviews {
    
    categoryTable = [[UITableView alloc] initWithFrame:CGRectMake(0, Start_Height, Screen_Width, Show_Height_Next - 50) style:UITableViewStylePlain];
    categoryTable.rowHeight = 48;
    categoryTable.backgroundColor = WHITE_COLOR;
    categoryTable.separatorStyle = UITableViewCellSeparatorStyleNone;
    categoryTable.delegate = self;
    categoryTable.dataSource = self;
    categoryTable.scrollEnabled = NO;
    [self.view addSubview:categoryTable];
    
    UIButton *addCategoryBtn = [CreateView createCustomBtnWithFrame:CGRectMake(SpaceLeftRight, ScreenHeight_WithoutBottomBar - 50, Screen_Width - SpaceLeftRight * 2, 40) title:AddCategory image:nil titleColorStr:ColorText_606060 fontSize:FontSize_14 superView:self.view];
    [addCategoryBtn addTarget:self action:@selector(addCategoryClicked) forControlEvents:UIControlEventTouchUpInside];
    addCategoryBtn.backgroundColor = ColorWithHexString(Color_MainFFDA44);
}

- (void)addCategoryClicked {
    
}

- (void)showInputAlertWithEditModel:(NSString *)model {
    WeakSelf;
    if (model) {
        alert = [UIAlertController alertControllerWithTitle:@"编辑属性" message:@"请输入新的规格名称" preferredStyle:UIAlertControllerStyleAlert];
    }else {
        alert = [UIAlertController alertControllerWithTitle:@"添加属性" message:@"请输入新的规格名称" preferredStyle:UIAlertControllerStyleAlert];
    }
    
    [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {
        if (model) {
//            textField.placeholder = model.name;
        }else {
            textField.placeholder = @"请输入属性名称";
        }
        [[NSNotificationCenter defaultCenter] addObserver:weakSelf selector:@selector(alertTextFieldDidChange:) name:UITextFieldTextDidChangeNotification object:textField];
    }];
    
    UIAlertAction *cancle = [UIAlertAction actionWithTitle:AlertBtn_Cancle style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
    }];
    [alert addAction:cancle];
    UIAlertAction *confirm = [UIAlertAction actionWithTitle:AlertBtn_Confirm style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
//        if (currentEditModel) {
//            [weakSelf sendRequestToUpdatePropertyWithName:alert.textFields[0].text];
//        }else {
//            [weakSelf sendRequestToAddPropertyWithName:alert.textFields[0].text];
//        }
        
    }];
    [alert addAction:confirm];
    confirm.enabled = NO;
    [self presentViewController:alert animated:YES completion:nil];
}

- (void)alertTextFieldDidChange:(NSNotification *)notification {
    UITextField *textField = notification.object;
    if (textField.text.length > 0) {
        alert.actions[1].enabled = YES;
    }else {
        alert.actions[1].enabled = NO;
    }
    if (textField.text.length > 5) {
        textField.text = [textField.text substringToIndex:5];
    }
}


#pragma mark - UITableViewDelegate && UITableViewDataSource
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return categoryArray.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    UITableViewCell *cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@""];
    cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
    
    cell.textLabel.font = Font14;
    cell.textLabel.textColor = ColorWithHexString(ColorText_333333);
    cell.textLabel.text = categoryArray[indexPath.row];
    [CreateView createLineViewWithFrame:CGRectMake(SpaceLeftRight, 47.5, Screen_Width - SpaceLeftRight, 0.5) colorStr:ColorLine_ededed superView:cell.contentView];
    
    [CreateView createLineViewWithFrame:CGRectMake(SpaceLeftRight, 0, Screen_Width - SpaceLeftRight, 0.5) colorStr:ColorLine_ededed superView:cell.contentView];
    
    UILabel *rightLabel = [CreateView createLabelWithFrame:CGRectMake(Screen_Width - 30 - 100, 14, 100, 20) text:@"" fontSize:FontSize_14 textColorStr:ColorText_999999 superView:cell.contentView];
    rightLabel.textAlignment = NSTextAlignmentRight;
    
    switch (indexPath.row) {
        case 0: {
            UIImageView *headImageView = [CreateView createImageViewWithFrame:CGRectMake(Screen_Width - 30 - 30, 9, 30, 30) image:nil superView:cell.contentView];
            [headImageView sd_setImageWithURLStr:@"" placeholderImage:ImageWithContentFile(@"h_pic")];
            SetViewCorner(headImageView, 15);
            rightLabel.text = @"";
            break;
        }
        case 1:
            rightLabel.text = @"";
            break;
        case 2:
            rightLabel.text = @"";
            break;
        case 3:
            rightLabel.text = @"";
            break;
        case 4:
            rightLabel.text = @"";
            break;
        case 5:
            rightLabel.text = [NSString stringWithFormat:@"v%@",App_Version];
            break;
        default:
            break;
    }
    return cell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    
}

#pragma mark - 接口请求
- (void)sendRequestToGetGoodsPropertyIsShowProcessHud:(BOOL)isShow {
    if (isShow)
        ShowProcessHud;
    WeakSelf;
    NSMutableDictionary *dic = [NSMutableDictionary dictionary];
    [dic setValue:CustID forKey:@"custId"];
    [dic setValue:ShopID forKey:@"shopId"];
    [RequestManager sendPostRequestWithURLString:ServerUrl_Read modular:Modular_goods requestName:RequestName_queryParProList parameters:dic completeBlock:^(NSString *resultCode, NSString *resultDesc, NSDictionary *dataDic) {
        HideProcessHud;
        if ([resultCode isEqualToString:@"0"]) {
            categoryArray = [NSMutableArray array];
            NSArray *listArray = [dataDic objectForKey:@"list"];
//            for (NSDictionary *dictionary in listArray) {
//                GoodsPropertyModel *model = [GoodsPropertyModel mj_objectWithKeyValues:dictionary];
//                [propertyArray addObject:model];
//            }
//            [self reloadCollectionView];
        }else {
            [weakSelf showToast:resultDesc];
        }
    } failedBlock:^(NSError *error) {
        HideProcessHud;
        [weakSelf showToast:ToastMsg_NetworkFailed];
    }];
}

- (void)sendRequestToAddPropertyWithName:(NSString *)name {
    ShowProcessHud;
    WeakSelf;
    NSMutableDictionary *dic = [NSMutableDictionary dictionary];
    [dic setValue:CustID forKey:@"custId"];
    [dic setValue:ShopID forKey:@"shopId"];
    [dic setValue:name forKey:@"name"];
    [dic setValue:@"1" forKey:@"type"];//1规格名/属性名称，2规格值/属性值
    [dic setValue:@"" forKey:@"sort"];
    [RequestManager sendPostRequestWithURLString:ServerUrl_Write modular:Modular_goods requestName:RequestName_addParentPro parameters:dic completeBlock:^(NSString *resultCode, NSString *resultDesc, NSDictionary *dataDic) {
        HideProcessHud;
        if ([resultCode isEqualToString:@"0"]) {
            
            [weakSelf sendRequestToGetGoodsPropertyIsShowProcessHud:NO];
        }else {
            [weakSelf showToast:resultDesc];
        }
    } failedBlock:^(NSError *error) {
        HideProcessHud;
        [weakSelf showToast:ToastMsg_NetworkFailed];
    }];
}

- (void)sendRequestToUpdatePropertyWithName:(NSString *)name {
    ShowProcessHud;
    WeakSelf;
    NSMutableDictionary *dic = [NSMutableDictionary dictionary];
    [dic setValue:CustID forKey:@"custId"];
    [dic setValue:ShopID forKey:@"shopId"];
    [dic setValue:@"" forKey:@"proId"];
    [dic setValue:name forKey:@"name"];
    [dic setValue:@"" forKey:@"sort"];
    [RequestManager sendPostRequestWithURLString:ServerUrl_Write modular:Modular_goods requestName:RequestName_updateParentPro parameters:dic completeBlock:^(NSString *resultCode, NSString *resultDesc, NSDictionary *dataDic) {
        HideProcessHud;
        if ([resultCode isEqualToString:@"0"]) {
            
            [weakSelf sendRequestToGetGoodsPropertyIsShowProcessHud:NO];
        }else {
            [weakSelf showToast:resultDesc];
        }
    } failedBlock:^(NSError *error) {
        HideProcessHud;
        [weakSelf showToast:ToastMsg_NetworkFailed];
    }];
}

- (void)sendRequestToDeletePropertyWithProId:(NSString *)proId {
    ShowProcessHud;
    WeakSelf;
    NSMutableDictionary *dic = [NSMutableDictionary dictionary];
    [dic setValue:proId forKey:@"proId"];
    [RequestManager sendPostRequestWithURLString:ServerUrl_Write modular:Modular_goods requestName:RequestName_delParentPro parameters:dic completeBlock:^(NSString *resultCode, NSString *resultDesc, NSDictionary *dataDic) {
        HideProcessHud;
        if ([resultCode isEqualToString:@"0"]) {
            
            [weakSelf sendRequestToGetGoodsPropertyIsShowProcessHud:NO];
        }else {
            [weakSelf showToast:resultDesc];
        }
    } failedBlock:^(NSError *error) {
        HideProcessHud;
        [weakSelf showToast:ToastMsg_NetworkFailed];
    }];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}
@end
